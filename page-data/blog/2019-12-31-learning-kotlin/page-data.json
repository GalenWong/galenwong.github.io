{"componentChunkName":"component---src-templates-blog-template-blog-template-tsx","path":"/blog/2019-12-31-learning-kotlin/","result":{"data":{"markdownRemark":{"html":"<ul>\n<li><a href=\"#lambda-and-anonymous-functions-af\">Lambda and Anonymous Functions (A.F.)</a>\n<ul>\n<li><a href=\"#return-from-lambda-and-af\"><code class=\"language-text\">return</code> from Lambda and A.F.</a></li>\n<li><a href=\"#nested-lambda-with-qualified-return\">Nested Lambda with Qualified Return</a></li>\n<li><a href=\"#passing-lambda-vs-af-as-argument\">Passing Lambda vs A.F. as Argument</a></li>\n<li><a href=\"#the-implicit-it-in-lambda\">The Implicit <code class=\"language-text\">it</code> in Lambda</a></li>\n<li><a href=\"#trailing-lambda-shorthand\">Trailing Lambda Shorthand</a></li>\n</ul>\n</li>\n<li><a href=\"#lateinit-variables\"><code class=\"language-text\">lateinit</code> Variables</a></li>\n<li><a href=\"#inflation\">Inflation</a></li>\n<li><a href=\"#default-parameters-with-inheritance\">Default Parameters with Inheritance</a></li>\n<li><a href=\"#default-parameters-evaluation\">Default Parameters Evaluation</a></li>\n</ul>\n<p>This is a blog post will act as a note as for my Kotlin\nlearning. I will document some pitfall that I encountered\nwhile learning the language and present it in a format\nsimilar to evil interview questions <del>because I like\ntorturing other people with interview questions</del>.</p>\n<h2 id=\"lambda-and-anonymous-functions-af\" style=\"position:relative;\"><a href=\"#lambda-and-anonymous-functions-af\" aria-label=\"lambda and anonymous functions af permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lambda and Anonymous Functions (A.F.)</h2>\n<h3 id=\"return-from-lambda-and-af\" style=\"position:relative;\"><a href=\"#return-from-lambda-and-af\" aria-label=\"return from lambda and af permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">return</code> from Lambda and A.F.</h3>\n<p>Take a look at the following code snippet.\nPredict its output to the console.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> arr <span class=\"token operator\">=</span> <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"stopAt3WithLambda\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">stopAt3WithLambda</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"stopAt3WithAF\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">stopAt3WithAF</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">stopAt3WithLambda</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    args<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span> k <span class=\"token operator\">-></span> \n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"this is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">k</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"finished, returning\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">stopAt3WithAF</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    args<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> <span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"this is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">k</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>      \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"finished, returning\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<details>\n<summary>Answer</summary>\n<p>The code block outputs the following to the console:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">stopAt3WithLambda\nthis is 1\nthis is 2\nthis is 3\nstopAt3WithAF\nthis is 1\nthis is 2\nthis is 3\nthis is 4\nthis is 5\nfinished, returning</code></pre></div>\n</details>\n<h4> Explanation</h4>\n<p>According the\n<a href=\"https://kotlinlang.org/docs/reference/returns.html#return-at-labels\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docs</a>,\na “qualified return” allows us to “return from an outer\nfunction”. I personally find it hard to understand the\nsentence when I first read it. What is a “qualified”\nreturn? Why an “outer” function? Doesn’t the <code class=\"language-text\">return</code>\nkeyword just return from the “current” function?</p>\n<p>To understand the statement, I interpret the terms as such:</p>\n<ul>\n<li>A “qualified” return is an action of return through the</li>\n</ul>\n<p>explicit return statement with the <code class=\"language-text\">return</code> keyword.\nMeaning</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">return</span> <span class=\"token number\">1</span></code></pre></div>\n<p>is a qualified return. Another type of return is the\nimplicit return from a lambda. Meaning, the last\nexpression of the body of the lambda.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">-></span>\n  <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"a: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">a</span></span><span class=\"token string\"> b: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">b</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n  a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The given lambda expression returns <code class=\"language-text\">a + b</code> implicitly,\nand this is not a qualified return.</p>\n<ul>\n<li>“Function” should be understood as a code block that\ncan be executed or invoked <strong>that is declared by the <code class=\"language-text\">fun</code>\nkeyword</strong>. A lambda is also a code block that is\nexecutable but it is not a “function” in this context.\nTherefore, in the statement, “returning from an outer\nfunction” means returning from a code block declared\nthrough the <code class=\"language-text\">fun</code> keyword.</li>\n</ul>\n<p>With such definition, this statement describes the behavior\nof qualified return in a lambda expression correctly.\nIn the given example above, the <code class=\"language-text\">return</code> keyword in the\nlambda is returning from <code class=\"language-text\">stopAt3WithLambda</code> instead of\nthe lambda expression. That’s why <code class=\"language-text\">\"finished, returning\"</code>\nis not printed.</p>\n<p>In <code class=\"language-text\">stopAt3WithAF</code>, however, the <code class=\"language-text\">return</code> keyword in the\nA.F. is returning from the anonymous <strong>function</strong> that is\ndeclared through a <code class=\"language-text\">fun</code> keyword. This is not a\ncontradiction to the statement if we interpret it\naccording to the definitions laid out above.</p>\n<p>The property introduces more interesting questions.</p>\n<ol>\n<li>What happens if we nest lambdas with inner qualified\nreturn?</li>\n<li>What if we pass a lambda with qualified return as an\nargument to a function? Will the behavior differ if we\npass an A.F. instead?</li>\n</ol>\n<h3 id=\"nested-lambda-with-qualified-return\" style=\"position:relative;\"><a href=\"#nested-lambda-with-qualified-return\" aria-label=\"nested lambda with qualified return permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nested Lambda with Qualified Return</h3>\n<p>According to the interpretation of the statement, I\nanticipate that the return to escape the nested lambda\nand return from the outer function with <code class=\"language-text\">fun</code> keyword.</p>\n<p>To validate the theory, we change our <code class=\"language-text\">stopAt3</code> to traverse\na 2D array instead. We have the following code snippets.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">val</span> matrix <span class=\"token operator\">=</span> <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span>\n    \t<span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    \n    <span class=\"token function\">stopAt3Nested</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">stopAt3Nested</span><span class=\"token punctuation\">(</span>matrix<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>Array<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    matrix<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span> row <span class=\"token operator\">-></span>\n        row<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span>k <span class=\"token operator\">-></span>\n        \t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"this is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">k</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"finished, returning\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As expected, the output is</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">this is 1\nthis is 2\nthis is 3</code></pre></div>\n<p>Meaning we returned from <code class=\"language-text\">stopAt3Nested</code> directly, without\nprinting <code class=\"language-text\">\"finished returning\"</code>.</p>\n<h3 id=\"passing-lambda-vs-af-as-argument\" style=\"position:relative;\"><a href=\"#passing-lambda-vs-af-as-argument\" aria-label=\"passing lambda vs af as argument permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Passing Lambda vs A.F. as Argument</h3>\n<blockquote>\n<p>What if we pass a lambda with qualified return as an</p>\n</blockquote>\n<p>argument to a function? Will the behavior differ if we\npass an A.F. instead?</p>\n<p>The reason why I asked this question is that if the return\nstatement in lambda or A.F. will return from the current\nscope where they are declared or within in the scope that\nthey are called (the function that accepts the lambda or\nA.F. as an argument). I realized that the answer is clearly\nstated in the given example.</p>\n<p>In our example, we passed lambda and A.F. to the function\nof <code class=\"language-text\">Array&lt;T>.forEach</code>, and we see the difference in their\nbehavior. Therefore, this provides us with a way to think\nabout the <code class=\"language-text\">return</code> statement. It jumps to the end of the\nclosest function “frame” delimited by the <code class=\"language-text\">fun</code> keyword.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token comment\">// jumps to the end of h, the closest function \"frame\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Another way to think about this is that <code class=\"language-text\">return</code> is\n“statically scoped” instead of dynamically scoped.\nThe target function to escape from is resolved at compile\ntime statically, instead of at run time dynamically.</p>\n<p><strong>Moral of the story:</strong> I should rethink about the term\nlambda. Computer Scientists could have called lambda just a\nshorthand for an anonymous function (in Kotlin at least),\nbut they did not for a reason.\n<strong>Lambdas and functions are different</strong>. The property of\njumping out of the closest function frame of a qualified\nreturn in lambda really makes lambda different from a\nfunction. It seems to open up doors to very interesting\nprogramming patterns but I can’t come up with anything\noff the top of my head.</p>\n<h3 id=\"the-implicit-it-in-lambda\" style=\"position:relative;\"><a href=\"#the-implicit-it-in-lambda\" aria-label=\"the implicit it in lambda permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Implicit <code class=\"language-text\">it</code> in Lambda</h3>\n<p>This is super weird to me at first but I guess it make\nsense as a short hand.</p>\n<p>What is the output if we executed the following function?</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">whatIsIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> it <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n  <span class=\"token keyword\">val</span> myEvilLambda <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"it in lambda: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">myEvilLambda</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<details>\n<summary>Answer</summary>\n<p>No, it is not 3 since this does not compile.\nFor the reason that the type of\n<code class=\"language-text\">it</code> cannot be inferred at declaration. Therefore, it is\nresolved to the <code class=\"language-text\">it</code> variable declared in the scope of\n<code class=\"language-text\">whatIsIt</code>. Therefore, <code class=\"language-text\">myEvilLambda</code> has the type of\n<code class=\"language-text\">Kotlin.Function0</code>, which means the lambda does not accept\nany arguments. To fix the problem, we can declare the\nparameter of <code class=\"language-text\">it</code> with an explicit type.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> myEvilLambda <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> it<span class=\"token operator\">:</span>Int <span class=\"token operator\">-></span>  \n  <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"it in lambda: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Well, this loses the point of the implicit <code class=\"language-text\">it</code> shorthand.</p>\n</details>\n<p>The <code class=\"language-text\">it</code> implicit keyword really shines when you are passing\na lambda to another function as an argument,\nsince the function that accepts the lambda already have\na type declared for the lambda. For example, in Android,\nwhen you add an listener:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">myButton<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> randNum <span class=\"token operator\">=</span> Random<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n  it<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">randNum</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Or what the people in JavaScript lands call the functional\nprogramming style of <code class=\"language-text\">map</code>, <code class=\"language-text\">reduce</code>, <code class=\"language-text\">filter</code>, but instead\nin Kotlin they are <code class=\"language-text\">flatMap</code>, <code class=\"language-text\">fold</code>, and <code class=\"language-text\">filter</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">intArray<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span> <span class=\"token punctuation\">{</span> it <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"trailing-lambda-shorthand\" style=\"position:relative;\"><a href=\"#trailing-lambda-shorthand\" aria-label=\"trailing lambda shorthand permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Trailing Lambda Shorthand</h3>\n<p>In the previous example of <code class=\"language-text\">Array.filter</code> and\n<code class=\"language-text\">setOnClickListener</code>, we see that we can pass lambda to a\nfunction omitting the parenthesis. This applies to any\nfunction with the last argument being a function type\n(here function type is used to refer to both lambda and\nfunctions).</p>\n<p>An example from the documentation is</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> product <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">fold</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> acc<span class=\"token punctuation\">,</span> e <span class=\"token operator\">-></span> acc <span class=\"token operator\">*</span> e <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Wow, this feels like functional programming a lot, where\n<code class=\"language-text\">items.fold(1)</code> returns a function as well. No, this is\nonly a visual trick to make you think that this is a higher\norder function when it is actually not.</p>\n<h2 id=\"lateinit-variables\" style=\"position:relative;\"><a href=\"#lateinit-variables\" aria-label=\"lateinit variables permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">lateinit</code> Variables</h2>\n<p>I understand the motivation behind <code class=\"language-text\">lateinit</code>,\nespecially in the context of UI development where some\nvariables are only initialized in the lifecycle methods.</p>\n<p>However, my first thought looking at this feature\nis that it is quite dangerous for a compiled language.\nIt is like the programmer tries to make a promise to the\nprogram like “I will definitely gives the variable a value\nbefore I use it. I promise”. We all know that human is never\nreliable. What happens if we access it without initializing\nit? Well, an exception is thrown. I naively thought that the\nprogram will actually not check if it is initialized first\nsince performance is better without the null check, but yes\nthat was way too naive.\nNull check is still done in run time before using <code class=\"language-text\">lateinit</code>\nvariables. It is not too much speed to sacrifice for safety.\nYou can just view it as a nullable type. However, it is\nstricter since it cannot be <code class=\"language-text\">null</code>. It either has a value\nor does not have a value at all.</p>\n<h2 id=\"inflation\" style=\"position:relative;\"><a href=\"#inflation\" aria-label=\"inflation permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inflation</h2>\n<p>In Android development, the term is used a lot. It means\n“instantiating a layout XML file into its corresponding\n<code class=\"language-text\">View</code> objects” (source:\n<a href=\"https://developer.android.com/reference/android/view/LayoutInflater\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LayoutInflator</a>).\nI understand it as parsing the XML file and generating the\nview hierarchy in memory. To draw analogy from the web dev\ndomain, it would be to parse the HTML file and generating\nthe actual DOM tree.</p>\n<h2 id=\"default-parameters-with-inheritance\" style=\"position:relative;\"><a href=\"#default-parameters-with-inheritance\" aria-label=\"default parameters with inheritance permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Default Parameters with Inheritance</h2>\n<p>Read the following code snippet.\nPredict its output to the console.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t<span class=\"token keyword\">val</span> a <span class=\"token operator\">=</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> b <span class=\"token operator\">=</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">open</span> <span class=\"token keyword\">class</span> A <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">open</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> i\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> B<span class=\"token operator\">:</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> i\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<details>\n<summary>Answer</summary>\n<p>No, there is no output since this code does not compile.\nThe reason can be found in the\n<a href=\"https://kotlinlang.org/docs/reference/functions.html#default-arguments\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kotlin docs</a>.\nHere I quote it.</p>\n<blockquote>\n<p>Overriding methods always use the same default parameter values as the base method. When overriding a method with default parameter values, the default parameter values must be omitted from the signature.</p>\n</blockquote>\n<p>The compiler error message for this case would be</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">An overriding function is not allowed to specify default values for its parameters</code></pre></div>\n</details>\n<h4>Discussion</h4>\n<p>Initially, I cannot understand the intention of such\nlanguage design decision. It is not difficult to\nimplement such language feature. The reason for\nsuch design is perfectly answered by\n<a href=\"https://stackoverflow.com/a/37701188\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this Stack Overflow answer</a>.\nThe following quote from the answer explain why\noverriding parent classes’ default parameters is bad:</p>\n<blockquote>\n<p>Callers would not know what the default value is unless they were aware of which implementation they were using, which is of course highly undesirable.</p>\n</blockquote>\n<p>What does it look like in code? Let’s assume that\nthe in another parallel universe the Kotlin compiler\nallow us to override the parent classes’ default\nparameters. Therefore the code above compiles.\nLet’s say that we declare a function that takes\nin an object of class <code class=\"language-text\">A</code> as parameter.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">processClassA</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When the programmer want to use <code class=\"language-text\">A.method</code> and its\ndefault parameters, it has to know which implementation\nof <code class=\"language-text\">A</code> is being passed in. The reason for that is that\nwe can also pass an instance of <code class=\"language-text\">B</code> into <code class=\"language-text\">processClassA</code>\nby the principle of OOP. That’s why such behavior is\nundesirable.</p>\n<p>Therefore, letting the parent class dictates the default\nparameters is the best choice to make so that programmer\ncan reason about their program easier.</p>\n<h2 id=\"default-parameters-evaluation\" style=\"position:relative;\"><a href=\"#default-parameters-evaluation\" aria-label=\"default parameters evaluation permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Default Parameters Evaluation</h2>\n<p>Predict the output to the console of the following code\nsnippet.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>_i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">whatIsGlobal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> global <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">getAndIncGlobal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n    global<span class=\"token operator\">++</span>\n    <span class=\"token keyword\">return</span> global\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">whatIsGlobal</span><span class=\"token punctuation\">(</span>g<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token function\">getAndIncGlobal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<details>\n<summary>Answer</summary>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10</code></pre></div>\n<p>This proves that the default parameter expression is\nevaluated at call time instead of compile time, unlike\nPython.</p>\n</details>","frontmatter":{"date":"2019-12-31","title":"Kotlin Learning Notes","subtitle":"The Traps and Pitfalls"},"timeToRead":10}},"pageContext":{"slug":"/2019-12-31-learning-kotlin/","prev":{"title":"Nesterov Momentum Equivalence Derivation","path":"/blog/2020-02-08-nesterov-momentum-equivalence/"},"next":{"title":"All about Tsung and Its Proxy recorder","path":"/blog/2019-11-22-all-about-tsung/"}}},"staticQueryHashes":["1827841","1979163989"]}