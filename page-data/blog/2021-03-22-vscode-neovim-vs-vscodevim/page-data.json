{
    "componentChunkName": "component---src-templates-blog-template-blog-template-tsx",
    "path": "/blog/2021-03-22-vscode-neovim-vs-vscodevim/",
    "result": {"data":{"markdownRemark":{"html":"<p>I like using Vim. I also like using VSCode. But I can’t really go back to\ntyping in insert mode by default anymore. To get the best of both worlds, I\nappeal to the extension that provides the Vim keymap. At the time of writing,\nthe\n<a href=\"https://marketplace.visualstudio.com/items?itemName=vscodevim.vim\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VSCodeVim</a>\nextension is the most popular Vim keymap with 2.4 million installs.  The second\nmost popular one is\n<a href=\"https://marketplace.visualstudio.com/items?itemName=asvetliakov.vscode-neovim\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vscode-neovim</a>.</p>\n<p>Which one should you use? Which one is “better” (It is always about trade off\nin coding. There is no absolute best). ? I have worked with both extension for\na substantially long enough time. I would definitely recommend vscode-neovim\nover VSCodeVim. My goal is to tell you why I prefer one over the other.</p>\n<p>VSCodeVim and vscode-neovim are implemented differently. VSCodeVim simulated\nthe Vim controls using JavaScript code and directly manipulated the text buffer\nwithin VSCode. On the other hand, vscode-neovim uses an actual Neovim instance.\nThe key presses are sent directly to the neovim instance and the text buffer is\nmanipulated by Neovim instead. This means that vscode-neovim should have a more\naccurate and complete functionality mapping from Vim. Here, I show a few\ndifferences of behavior of vscode-neovim and VSCodeVim.</p>\n<h3 id=\"visual-block-selection\" style=\"position:relative;\"><a href=\"#visual-block-selection\" aria-label=\"visual block selection permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Visual Block Selection</h3>\n<p>One of the feature that I love the most about Vim is visual block selection.\nIt let’s you select a 2D block from the two-dimensional plane of the text\neditor. Then you can yank (copy) the selected block and move it around.\nThis is what it looks like with vscode-neovim.</p>\n<div align=center>\n<video autoplay loop muted playsinline style=\"max-width: 500px; width: 100%\">\n<source src=\"/ff66fc55b24953a22721e3481883dd14/neovim-visual-block.mp4\" type=\"video/mp4\">\n</video>\n<p><em>Visual block mode in vscode-neovim</em></p>\n</div>\n<p>The behavior of visual block in vscode-neovim is exactly the same as in Vim.\nHowever, this feature doesn’t work properly within VSCodeVim. Take a look at\nthe following demo:</p>\n<div align=center>\n<video autoplay loop muted playsinline style=\"max-width: 500px; width: 100%\">\n<source src=\"/7c1f03dc68b127a7f4618267d82a9f02/vim-visual-block.mp4\" type=\"video/mp4\">\n</video>\n<p><em>Broken visual block mode in VSCodeVim</em></p>\n</div>\n<p>The reason why I think that did not work is that VSCodeVim probably kept the\nblock selected text as a string with newline inserted in the buffer.  When it\nis pasted somewhere else, it inserts the newline from the buffer as well. This\ngives us less flexibility when it comes to text manipulation.</p>\n<h3 id=\"performance\" style=\"position:relative;\"><a href=\"#performance\" aria-label=\"performance permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Performance</h3>\n<p>People has claimed that the vscode-neovim is more performant than VSCodeVim.\nHere we see a few review under vscode-neovim:</p>\n<blockquote>\n<p><em>Skye Nygaard</em> 20/01/2021: This is so so much faster than the normal vscode vim\nextension, no lag, works like vim should</p>\n</blockquote>\n<blockquote>\n<p><em>Grant Mercer</em> 03/12/2020: After spending hours and hours trying to optimize\nVSCodeVIM so it wouldn’t lag on my large django codebase I decided to give Neo\nVim a try.</p>\n<p>Night and day difference. Neo Vim is lightning fast and I’m so glad I don’t\nhave to suffer through huge keypress lag just to have VIM shortcuts.\nIncredible extension</p>\n</blockquote>\n<p>I can’t easily recreate a performance issue. However, from how the two extensions\nimplement macros, we can see why vscode-neovim is faster than VSCodeVim.</p>\n<div align=center>\n<video autoplay loop muted playsinline style=\"max-width: 500px; width: 100%\">\n<source src=\"/4dbfcd7327e967ad77c4b81571313155/neovim-macro.mp4\" type=\"video/mp4\">\n</video>\n<p><em>Macro in vscode-neovim</em></p>\n</div>\n<p>Let me explain what command I just issued there:</p>\n<ul>\n<li><code class=\"language-text\">qq</code>: start recording a macro to the buffer <code class=\"language-text\">q</code>:\n<ul>\n<li><code class=\"language-text\">dw</code>: delete the next word from the cursor</li>\n<li><code class=\"language-text\">j</code>: move down one line</li>\n</ul>\n</li>\n<li><code class=\"language-text\">q</code>: stop recording macro</li>\n<li><code class=\"language-text\">10@q</code>: invoke the macro in the buffer <code class=\"language-text\">q</code> for <code class=\"language-text\">10</code> times</li>\n</ul>\n<p>Combined into a sequence of key strokes: <code class=\"language-text\">qqdwjq10@q</code>.</p>\n<p>Therefore, the macro simply delete the first word of the line, and move the the\nline below. Repeating the macro <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span> times will delete the first word for <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span>\nlines. Yes, this is the power of Vim. You just gotta admire it.</p>\n<p>We can actual do the same thing within VSCodeVim, using the exactly same key\nstroke we used above.</p>\n<div align=center>\n<video autoplay loop muted playsinline style=\"max-width: 500px; width: 100%\">\n<source src=\"/5d41901c35b178588cd8b53d3a956162/vim-macro.mp4\" type=\"video/mp4\">\n</video>\n<p><em>Macro in VSCodeVim</em></p>\n</div>\n<p>But this time, notice how we are able to perceive command being executed 10\ntimes serially right in front of us. 10 lines might not be too bad. However,\nimagine a super complex macro applied to the entire file of over 200 lines.\n200 lines are not uncommon code file size. At the same time, there is a heavy\nlanguage server running in the background against the large code base, like a\ndjango code base mentioned by one of the review. All the static analysis and\nsyntax highlighting everytime the view is updated.  This can be a real pain.\nMy guess is that VSCodeVim updated the buffer and the view (the DOM since\nVSCode runs in electron) everytime the macro is executed. And all these happens\nin a blocking manner. Vscode-neovim only updates the view once after all the\nmacros have been applied, hence its superior perforamnce.</p>\n<p>This constantly causes me issue when I am using VSCodeVim.  Sometimes, I forgot\nthat I hit a number like <code class=\"language-text\">100</code>. Then, I just went ahead to insert mode and type.\n(<code class=\"language-text\">100ilove</code><kbd>ESC</kbd>) After escape, the text I typed got reinputted 100\ntimes. Then, I need to wait for it to finish rendering. Even if I hit undo <code class=\"language-text\">u</code>,\nit has to finish the repetition completely before it can undo.</p>\n<h3 id=\"undoing\" style=\"position:relative;\"><a href=\"#undoing\" aria-label=\"undoing permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Undoing</h3>\n<p>The next issue with VSCodeVim is undoing. In Vim, the key to undo is <code class=\"language-text\">u</code>.  In\nVSCode, or any common software really, the short cut to perform an undo is\n<kbd>Ctrl/Cmd</kbd>+<kbd>z</kbd>. In VSCodeVim, the vim <code class=\"language-text\">u</code> undoing and VSCode\ncontrol-z undoing has different behavior. Again using the macro example above,\nwe take a look at the difference in behavior in the <code class=\"language-text\">u</code> undo and control-z undo:</p>\n<div align=center>\n<video autoplay loop muted playsinline style=\"max-width: 500px; width: 100%\">\n<source src=\"/b46cb9853d94cd3357f278975074eb2f/vim-u-undo.mp4\" type=\"video/mp4\">\n</video>\n<p><em><code class=\"language-text\">u</code> undo in VSCodeVim</em></p>\n</div>\n<div align=center>\n<video autoplay loop muted playsinline style=\"max-width: 500px; width: 100%\">\n<source src=\"/c497f94ff585a45fbab711e2df2d64c5/vim-z-undo.mp4\" type=\"video/mp4\">\n</video>\n<p><em>control-z undo in VSCodeVim</em></p>\n</div>\n<p>In this example, <code class=\"language-text\">u</code> undoes all eleven times of macro. However, the control-z\nundoes only one time of the macro. Now imagine what happens if you hit\ncontrol-z, and then hit <code class=\"language-text\">u</code>? Is it going to redo the undone macro? If so, what\nis the meaning of undo if the behavior is redo? If not, is our buffer being put\ninto a unpredictable state? This behavior is extremely confusing. My code file\nhas definitely be put in some state that is broken and unrecoverable.</p>\n<p>The undo stack also causes a lot of problems for other people as well, as\noutlined in these two issues on the VSCodeVim GitHub:</p>\n<ul>\n<li><a href=\"https://github.com/VSCodeVim/Vim/issues/1490\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VSCodeVim Undo stack should be synced with VSCode undo\nstack</a></li>\n<li><a href=\"https://github.com/VSCodeVim/Vim/issues/2007\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pressing ‘u’ will undo all the\nstack.</a></li>\n</ul>\n<p>I quote one user from the GitHub issue:</p>\n<blockquote>\n<p><a href=\"https://github.com/VSCodeVim/Vim/issues/2007#issuecomment-336259437\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">jcjolley commented on 13 Oct\n2017</a>\nFWIW, I also am experiencing this bug. Hitting undo is like rolling the dice.</p>\n</blockquote>\n<p>In vscode-neovim, the behavior is consistent. I didn’t have to worry about by\ncode file being put in a state that is broken.</p>\n<h3 id=\"gqip-in-markdown-list\" style=\"position:relative;\"><a href=\"#gqip-in-markdown-list\" aria-label=\"gqip in markdown list permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">gqip</code> in markdown list</h3>\n<p><code class=\"language-text\">gqip</code> is another feature that I love about Vim once I found out about it.  It\nindents the current paragraph of text such that the line width doesn’t exceed a\npre-configured maximum line width, defined by the variable <code class=\"language-text\">textwidth</code>.</p>\n<p>However, the feature needs to be a little smarter when it comes to markup files\nlike Markdown. Consider the following example:</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token list punctuation\">-</span> a short line \n<span class=\"token list punctuation\">-</span> a super long line within a list that is so so so so so so so so so so so so so so so so long</code></pre></div>\n<p>Since the two lines are directly next to each other, they are in the same\n“paragraph” and performing <code class=\"language-text\">gqip</code> should format both line. But a human knows\nthat only the second line should be wrapped and the first line should stay\nunchanged since we know Markdown relies on newline as a syntax to separate two\nlist items. Let’s see how this is handled within vscode-neovim and VSCodeVim.</p>\n<div align=center>\n<video autoplay loop muted playsinline style=\"max-width: 500px; width: 100%\">\n<source src=\"/9735e07e609e7dbee9caf50f894233a2/neovim-gqip.mp4\" type=\"video/mp4\">\n</video>\n<p><em><code class=\"language-text\">gqip</code> in vscode-neovim</em></p>\n</div>\n<div align=center>\n<video autoplay loop muted playsinline style=\"max-width: 500px; width: 100%\">\n<source src=\"/52b94d7ec75a56c6ca7295de13cd572b/vim-gqip.mp4\" type=\"video/mp4\">\n</video>\n<p><em><code class=\"language-text\">gqip</code> in VSCodeVim</em></p>\n</div>\n<p>Hey, vscode-neovim is actually very smart. Well, since it uses an actual Neovim\ninstance, we should say that Neovim is smart. It knows to only wrap around the\nsecond list item but not the first. It even indented the wrapped line such that\nit matches the first character after the marker. However, the VSCodeVim is not\nlanguage-aware and treats two adjacent list item as the same paragraph and\nperformed the line wrap.</p>\n<p>The smart line wrapping matters a lot to me since I takes a lot of my class\nnotes in Markdown and it makes life easier if it can wrap my line smartly.</p>\n<h3 id=\"search-and-replace\" style=\"position:relative;\"><a href=\"#search-and-replace\" aria-label=\"search and replace permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Search and replace</h3>\n<p>The difference in search and replace boils down to the two regex engine driving\nthe <code class=\"language-text\">:substitute</code> function within Vim in VSCode. Here, I will explain the\ndifference with the capture group syntax as an illustrating example on how the\ntwo differs.</p>\n<p>VSCodeVim uses the JavaScript regex engine. Therefore, in the match expression\nwe can use any regex syntax supported by the JavaScript regex engine (refer to\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Cheatsheet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this MDN\ncheatsheet</a>\nfor a quick reference for regex syntax support). By default, capture group is\ndenoted with unescaped parantheses. The expression <code class=\"language-text\">(\\d+)</code> is a capture group\nthat captures a substring with one or more digits. vscode-neovim uses the\nprogram <code class=\"language-text\">sed</code> for its search and replace function. This means whatever is\nsupported by <code class=\"language-text\">sed</code> is supported by <code class=\"language-text\">:s</code>. To write the same capture group, one\nwill say instead <code class=\"language-text\">\\(\\d\\+\\)</code>. To be fair, the JavaScript one will be easier to\nwrite in this case.</p>\n<p>Another point of difference is referencing capture group in the replace\npattern.  According to the <a href=\"https://docs.microsoft.com/en-us/visualstudio/ide/using-regular-expressions-in-visual-studio?view=vs-2019#capture-groups-and-replacement-patterns\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Visual Studio\ndocumentation</a>,\nreferencing capture group in VSCode is done with <code class=\"language-text\">$1</code>. <code class=\"language-text\">sed</code> uses <code class=\"language-text\">\\1</code>. For the\nsame search and replace, one will need to write different command in VSCodeVim\nand vscode-neovim.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># In VSCodeVim\n:s/(\\S+\\(\\))/package.$1/g\n\n# In vscode-neovim\n:s/\\(\\S\\+()\\)/package.\\1/g</code></pre></div>\n<p>Let me explain the regex here. We are matching for function calls with no\nparameter, where <code class=\"language-text\">\\S</code> matches non-whitespace character and it is followed by\n<code class=\"language-text\">()</code>. This matches any expression like <code class=\"language-text\">error()</code> or <code class=\"language-text\">someGenericThunk()</code>. We\nput this match in a capture group. In the replace pattern, we will prepend\n<code class=\"language-text\">package.</code> to the matched group. Therefore, <code class=\"language-text\">error()</code> will turn into\n<code class=\"language-text\">package.error()</code> and <code class=\"language-text\">someGenericThunk()</code> will turn into\n<code class=\"language-text\">package.someGenericThunk()</code>. The <code class=\"language-text\">g</code> indicate search replace globally across\neach line. It will replace all occurences of a matched pattern in a line.</p>\n<p>Choosing which one you like is a matter of habit. Since I am pretty comfortable\nwith the Vim regex, then I think vscode-neovim is more for me. If you think\nthat you like the JavaScript regex better, go ahead and try VSCodeVim!</p>\n<h3 id=\"vscode-neovim-is-not-all-perfect\" style=\"position:relative;\"><a href=\"#vscode-neovim-is-not-all-perfect\" aria-label=\"vscode neovim is not all perfect permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>vscode-neovim is not all perfect</h3>\n<p>Overall, I think vscode-neovim allows for an smoother adaptation from Vim to\nVSCode. It matches actual Vim behavior and has better performance. Even better,\nwe can make use of the Neovim config file to customize behavior. You get basically\nall the power of Vim through vscode-neovim. However, it is not without drawback.</p>\n<p>First, its selection is not actual VSCode selection. What does this mean?  It\nmeans that I will not be able to copy a selected chunk of text using\ncontroll/cmd-c. For instance, if a select a word in visual mode and attempt to copy it with cmd-c. It does not work!</p>\n<div align=center>\n<video autoplay loop muted playsinline style=\"max-width: 500px; width: 100%\">\n<source src=\"/6e88b6e49fe4fcfd5be8f5f79858466a/neovim-cmd-c.mp4\" type=\"video/mp4\">\n</video>\n<p><em>Broken cmd-c copy and paste in vscode-neovim</em></p>\n</div>\n<p>Copying with cmd-c copyed the current line where the cursor is located, doesn’t\nexist out of visual mode. When paste happens, we are still in visual mode and\nmore chunk of text are selected. If we want something in copied to the system\nclipboard buffer, we can invoke the copy command using the command selector.</p>\n<div align=center>\n<video autoplay loop muted playsinline style=\"max-width: 500px; width: 100%\">\n<source src=\"/2b10bbb829bee4f328ed0b4ead8d32a5/neovim-csp-copy.mp4\" type=\"video/mp4\">\n</video>\n<p><em>cmd-c copy and paste in vscode-neovim through the command picker</em></p>\n</div>\n<p>On the other hand, VSCodeVim support cmd-c copying seemlessly. However, this is\nnot really a big deal for me since in the terminal Vim, I cannot use cmd-c\ncopying anyway.</p>\n<p>Another drawback of vscode-neovim is setting up. It requires a system\ninstallation of Neovim. VSCodeVim only requires the extension to be installed\nand there are no other dependencies. Setting VSCodeVim is way easier than\nvscode-neovim.</p>\n<p>There are also other limitations of vscode-neovim that I won’t list here.  The\nauthor of the extension seems to know the limitation pretty well and they are\ndocumented in the <a href=\"https://github.com/asvetliakov/vscode-neovim#important\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">README of\nvscode-neovim</a>. It\ngives a good idea to the user of the extension on what to expect.</p>\n<p>In conclusion, I like vscode-neovim since it fits I find it more comfortable,\nwhich is the most important. However, if you like how VSCodeVim does things, go\nahead as well! Again, it is all about trade-offs.</p>","frontmatter":{"date":"2021-03-22","title":"Why I chose vscode-neovim over VSCodeVim","subtitle":"A comparison between the two VSCode Vim extensions"},"timeToRead":10}},"pageContext":{"slug":"/2021-03-22-vscode-neovim-vs-vscodevim/","prev":{"title":"My Notes for UCLA CS231: Types and Programming Languages","path":"/blog/2021-08-29-cs231-notes/"},"next":{"title":"How to teach useEffect without componentDidMount","path":"/blog/2021-02-16-how-to-teach-useEffect/"}}},
    "staticQueryHashes": ["1827841","1979163989"]}