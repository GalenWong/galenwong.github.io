{
    "componentChunkName": "component---src-templates-blog-template-blog-template-tsx",
    "path": "/blog/2019-09-25-random-arr-0/",
    "result": {"data":{"markdownRemark":{"html":"<p>This is going to be a blog series of <strong>me</strong> discussing how\nto permutate a random Array in JavaScript. <em>I am aware\nof the proven and working methods that is called\n<a href=\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Knuth shuffle</a>\nmethod.</em> I stress the “me” since it is more about\npresenting <strong>my</strong> thought and learning process.\nIf you are here for a quick method for permutating\nan array, go <a href=\"https://www.rosettacode.org/wiki/Knuth_shuffle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<h3 id=\"laying-out-the-problem\" style=\"position:relative;\"><a href=\"#laying-out-the-problem\" aria-label=\"laying out the problem permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Laying out the Problem</h3>\n<p>In an interview, I got asked the following problem.</p>\n<blockquote>\n<p>Given a number <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span>, return an array containing a\nfair random permutation of <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mtext> </mtext><mn>0</mn><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">[\\,0, n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>.</p>\n</blockquote>\n<p>For any set <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mtext> </mtext><mn>0</mn><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">[\\,0, n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>, there are <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo stretchy=\"false\">!</mo></mrow><annotation encoding=\"application/x-tex\">n!</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span></span></span></span></span> of unique possible\narrangements (<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo stretchy=\"false\">!</mo></mrow><annotation encoding=\"application/x-tex\">n!</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span></span></span></span></span> ways of ordering it). A fair random\npermutation says that the possibility of returning any\none of those arrangement should be equal.\nIn other words, the probability of getting any one of\nthose sequence <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span></span> is given by</p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo>=</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo stretchy=\"false\">!</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">P(S=s) = \\frac{1}{n!}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></div>\n<p>For <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">n=3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span></span>, the function have the equal chance of returning\n<code class=\"language-text\">[0, 1, 2]</code>, <code class=\"language-text\">[0, 2, 1]</code>, <code class=\"language-text\">[1, 0, 2]</code>, <code class=\"language-text\">[1, 2, 0]</code>,\n<code class=\"language-text\">[2, 0, 1]</code>, and <code class=\"language-text\">[2, 1, 0]</code>.</p>\n<h3 id=\"its-dark-art-harry-its-a-forbidden-jutsu-naruto\" style=\"position:relative;\"><a href=\"#its-dark-art-harry-its-a-forbidden-jutsu-naruto\" aria-label=\"its dark art harry its a forbidden jutsu naruto permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>It’s Dark Art, Harry! (It’s a Forbidden JuTsu, Naruto!)</h3>\n<p>It seems like a simple problem. But I am a programmer that\ntHInkS OuT oF THe bOx, my first solution to question is\nwith <code class=\"language-text\">Array.prototype.sort</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">randomArr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It is short, and it is simple if you understand it.\nLet’s try to walk through this code, starting with how I\nget an array of <code class=\"language-text\">[0, 1, 2,… n]</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">randomArr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By passing a number <code class=\"language-text\">n</code> to the <code class=\"language-text\">Array</code> constructor,\nwe create an array with length <code class=\"language-text\">n</code>. Since we never\nspecified the elements, all of the elements are\n<code class=\"language-text\">undefined</code> by default. I am not sure if this is part of\nthe ECMAScript standard, but it does not really matter to\nus.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">randomArr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">[...arr.keys()]</code> represents the array <code class=\"language-text\">[0, 1, 2, … n]</code>.\nYou might ask why is the destructuring (the <code class=\"language-text\">...</code>\noperator, how ever you call it) necessary.\nIn this case, it is not actually an “destructuring”\noperation. <code class=\"language-text\">Array.prototype.keys</code> actually returns an\n<strong>iterator</strong>, the <code class=\"language-text\">...</code> operator is to force iterate\nthe iterator such that we get an array.</p>\n<p>Side note: you might have thought of using <code class=\"language-text\">Object.keys</code>\nhere, but it returns an array of strings. It makes sense\nfrom an Object’s point of view since all keys are simply\nconverted to string in an object.</p>\n<p>Here comes the fun part, the dark art, the black magic,\nthe forbidden spell: the magical <code class=\"language-text\">Array.prototype.sort</code>\nfunction. By default, it sorts an array by converting\nthe object to a string, and use the alphabetical order.\nWhen I was new to JavaScript, I got super confused about\nwhy <code class=\"language-text\">[1, 2, 12].sort()</code> gives me <code class=\"language-text\">[1, 12, 2]</code>.</p>\n<div align=center>\n<p><img src=\"/eaefbeea854c0e195a121aea09939db8/the-more-you-know.gif\" alt=\"The more you know meme\"></p>\n</div>\n<p>We can overwrite this behavior by providing a custom\ncomparison function. If you have worked with sorting\nin C/C++, it is the same logic. The comparison function\n<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span></span> takes in two element <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span></span> and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span></span>. We define <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span></span> as</p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.3600em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mtable rowspacing=\"0.2500em\" columnalign=\"right\" columnspacing=\"\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mn>0</mn><mtext> if </mtext><mi>a</mi><mo>=</mo><mi>b</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mo>></mo><mn>0</mn><mtext> if </mtext><mi>a</mi><mo>></mo><mi>b</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mo>&#x3C;</mo><mn>0</mn><mtext> if </mtext><mi>a</mi><mo>&#x3C;</mo><mi>b</mi></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">f(a, b) = \\begin{cases}\n\\begin{aligned}\n0\\text{ if }a = b\\\\\n>0\\text{ if } a > b\\\\\n&#x3C;0\\text{ if } a &#x3C; b\\\\\n\\end{aligned}\n\\end{cases}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:4.500000000000002em;vertical-align:-2.0000000000000004em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.3500199999999998em;\"><span style=\"top:-2.19999em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-2.19199em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.31599999999999984em;width:0.889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.889em\" height=\"0.31599999999999984em\" style=\"width:0.889em\" viewBox=\"0 0 889 316\" preserveAspectRatio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-3.15001em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.292009999999999em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.31599999999999984em;width:0.889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.889em\" height=\"0.31599999999999984em\" style=\"width:0.889em\" viewBox=\"0 0 889 316\" preserveAspectRatio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-4.600019999999999em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8500199999999998em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.5000000000000013em;\"><span style=\"top:-4.5em;\"><span class=\"pstrut\" style=\"height:4.5em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.5000000000000004em;\"><span style=\"top:-4.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord text\"><span class=\"mord\"> if </span></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\">b</span></span></span><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mrel\">></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">0</span><span class=\"mord text\"><span class=\"mord\"> if </span></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\">b</span></span></span><span style=\"top:-1.6599999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mrel\">&#x3C;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">0</span><span class=\"mord text\"><span class=\"mord\"> if </span></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&#x3C;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.000000000000001em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.0000000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></div>\n<p>This means that a numerical sorting can be done by</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">numericArray<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The black magic that I used is to return a random number\nwith a uniform distribution between <code class=\"language-text\">-0.5</code> to <code class=\"language-text\">0.5</code>\n(aka <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>Unif</mtext><mo stretchy=\"false\">[</mo><mo>−</mo><mn>0.5</mn><mo separator=\"true\">,</mo><mn>0.5</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\text{Unif}[-0.5, 0.5]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">Unif</span></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">0.5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0.5</span><span class=\"mclose\">]</span></span></span></span></span>). Since <code class=\"language-text\">Math.random</code>\nreturns a random float between 0 to 1,\n<code class=\"language-text\">Math.random() - 0.5</code> returns our desired distribution.</p>\n<p>Think about it on a very high level, and efficiency aside.\nIf the comparison operation is random, the resulting\n“sorted” array should also be random, right?</p>\n<h3 id=\"how-i-got-rejected-for-the-internship\" style=\"position:relative;\"><a href=\"#how-i-got-rejected-for-the-internship\" aria-label=\"how i got rejected for the internship permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How I Got Rejected for the Internship</h3>\n<blockquote>\n<p>“I think this does not work. The smaller number has a\nhigher chance of showing up closer to the beginning.”</p>\n</blockquote>\n<p>This was the reaction from the interviewer after he\nsaw my tHInkS OuT oF THe bOx solution.\nNow, it is time for me to give it a second deeper thought.\nMost of the libraries/languages implements quicksort.\nThe recursive algorithm for quicksort is layed out as</p>\n<ol>\n<li>pick a random number to be the pivot</li>\n<li>divide the rest of the number into 2 sets.\nA set with all values smaller than the pivot,\nand the other one larger\n(let’s ignore cases with repeated elements)</li>\n<li>Repeat 1 and 2 on the two sets</li>\n</ol>\n<p>With that simple algorithm in mind, I was able to run a\nsketch of proof in my head, the proof to why my method\nworks fairly. Here is the central idea to the proof.</p>\n<blockquote>\n<p>There is an equal chance of an element ending up on the\n“smaller” set and the “larger” set, given our random\ncomparison function distributes as <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">U</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">f</mi><mo stretchy=\"false\">[</mo><mo>−</mo><mn>0.5</mn><mo separator=\"true\">,</mo><mn>0.5</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\rm Unif[-0.5, 0.5]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\" style=\"margin-right:0.07778em;\">Unif</span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord mathrm\">0.5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathrm\">0.5</span><span class=\"mclose\">]</span></span></span></span></span></span>.</p>\n</blockquote>\n<p>Then, we apply this fact recursively, we can say that\nany element has an equal chance of ending up in any\npositions. It therefore concludes my hand-wavy proof.</p>\n<p>I did not argue with the interviewer and did not present\nmy mental proof. There is no way that I can demonstrate\nmy proof is 100% correct, and I don’t want to validate\nmy solution statistically by running it ten thousands\ntimes during the interview.\nI quickly switched to another approach that for sure\nworks. More on that later. At the end of the story, I got\nrejected for the internship. I was slightly salty.\n(If you know me well, you know how salty I actually got.)</p>\n<h3 id=\"it-was-all-tims-fault\" style=\"position:relative;\"><a href=\"#it-was-all-tims-fault\" aria-label=\"it was all tims fault permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>It Was All Tim’s Fault!</h3>\n<p>After I got salty, I decided to validate my solution.\nWe can simply run the function for many times, and record\nwhere the elements ends up in. This is known as the\n<a href=\"https://en.wikipedia.org/wiki/Law_of_large_numbers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">law of large number</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">audit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">randomFunc<span class=\"token punctuation\">,</span> numIter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> dummy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> densityMap <span class=\"token operator\">=</span> dummy<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numIter<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token function\">randomFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> idx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> densityMap<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> densityMap<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The <code class=\"language-text\">audit</code> function takes in <code class=\"language-text\">randomFunc</code>, which is the\nfunction that returns the randomly permutated array, and\n<code class=\"language-text\">numIter</code>, which is the number of times we are running\nthe function. In this audit function, we assumed <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">n=100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">100</span></span></span></span></span>\nto simplify things.</p>\n<p>Most importantly, it returns a density map, a 100x100 2-D\narray recording how many times that each number appeared\nin each index. With the density map available, we can\nvisualize the data.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> times <span class=\"token operator\">=</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> density <span class=\"token operator\">=</span> <span class=\"token function\">audit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">randomArr</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> times<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> probability <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> num <span class=\"token keyword\">of</span> density<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  probability<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">/</span> times <span class=\"token operator\">*</span> <span class=\"token number\">100.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>probability<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We convert the density to a probability map, and\nsimply print the map. Is it too simple? We did not even\nexamine the rest of it. But this is already enough,\nenough to prove me wrong.</p>\n<p>Here is a probability map that I got for the number <code class=\"language-text\">1</code>,\nrunning the function for 100000 times, with <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">n=100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">100</span></span></span></span></span>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'1.09'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.39'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.57'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.46'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.60'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.63'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.62'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.48'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.57'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.53'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.44'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.53'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.50'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.50'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.46'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.47'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.42'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.37'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.38'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.35'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.43'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.32'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.34'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.40'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.31'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.37'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.28'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.29'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.32'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.27'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.30'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.31'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.32'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.25'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.24'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.27'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.20'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.20'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.11'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.17'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.13'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.13'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.15'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.14'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.08'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.16'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.12'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.10'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.07'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.07'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.09'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.08'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.07'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.07'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.05'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.04'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.03'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.04'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.93'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.97'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.96'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.92'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.90'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.88'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'0.86'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.86'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.84'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.74'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.80'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.82'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'0.78'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.69'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.73'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.68'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.66'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.65'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'0.63'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.56'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.60'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.58'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.55'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.56'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'0.50'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.50'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.43'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.38'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.44'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.40'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'0.35'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.38'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.35'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.30'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.27'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.26'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'0.20'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.17'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.15'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.11'</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>This map represents what is the probability of the number\n1 appearing in each index.\nIf my method was correct, this map should have been\nall ones, or at least values that are close to one.\nBut look at the last few indices, the number <code class=\"language-text\">1</code> only\nshows up there with a 20% chance.\nI was wrong, yet I was so confident.\nNot only is my method slow (sorting has a time complexity of <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>), it is also incorrect and unfair.\nBut what went wrong though?</p>\n<p>The biggest fault in my thought process is in my\nassumption. I assumed that JavaScript (or more\nspecifically the V8 engine) implements\n<code class=\"language-text\">Array.prototype.sort</code> using quicksort. I was wrong.\nJust recently, they <a href=\"https://v8.dev/blog/array-sort#timsort\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">switched to using Tim sort</a>.</p>\n<p>Tim sort is a combination of insertion sort and\nmerge sort. We are not discussing the details here.\nBut that means my proof cannot be applied.</p>\n<h3 id=\"no-i-am-still-right-maybe\" style=\"position:relative;\"><a href=\"#no-i-am-still-right-maybe\" aria-label=\"no i am still right maybe permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>No, I Am Still Right. Maybe</h3>\n<p>What if I implemented my own quicksort? That defeats the\npurpose of using this dark magic for it being a 2-liner.\nBut it should work by theory.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">quicksortFactory</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">comparison</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isSmaller</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">comparison</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">quicksort</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tuple<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isSmaller</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> pivot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> tuple<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> tuple<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> tuple<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token comment\">/*smaller*/</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> <span class=\"token comment\">/*bigger*/</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> leftSorted <span class=\"token operator\">=</span> <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> rightSorted <span class=\"token operator\">=</span> <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        leftSorted<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>pivot<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rightSorted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> leftSorted<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> quicksort<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice how I pick the pivot randomly, that is important\nto ensure the fairness as well.\nThis implementation is not efficient both in terms of\ntime and memory, but what I really care about is that\nit implements the quicksort algorithm.\nUsing the same configuration as above, we get the\nfollowing distribution for the number 1.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.06'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.03'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'0.95'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.97'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.97'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.97'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.06'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.04'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.03'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.97'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.99'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.95'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.97'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.07'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.94'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.05'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.03'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.97'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.06'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.99'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.99'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'0.97'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.97'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.05'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'0.96'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.99'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.03'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.94'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.97'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.99'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.03'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.99'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.08'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.97'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.05'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.05'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.07'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.05'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.95'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.99'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.97'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.95'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'0.97'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.99'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.03'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'0.95'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.02'</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>It is pretty even and close enough to 1.\nBut let’s compare it to other methods that works.</p>\n<p>Here is the mathematically proven Knuth shuffle method.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> tmp<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">,</span> top <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>top<span class=\"token punctuation\">)</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>top<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        current <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tmp <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        array<span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        array<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This gives us the following distribution map</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.03'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.97'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.95'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'0.96'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.99'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.99'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.95'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.04'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.03'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.03'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.93'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.99'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.96'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.99'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.04'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.03'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.95'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.03'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'0.97'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.03'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.95'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.99'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.04'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.99'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.02'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.97'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.95'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.02'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'0.99'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.96'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.97'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.03'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.03'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.04'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.96'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.04'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.97'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.96'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.04'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.04'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.05'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.05'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.99'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.96'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.02'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'0.97'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.04'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.05'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.06'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.92'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.01'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1.04'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.93'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.98'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.01'</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>If we only look at the distribution of one number,\nthe method of random quicksort-ing seems to work in terms\nof fairness. In a future blog post, I will do a more\nrigorous measurement of the distribution.</p>\n<p>I am quite happy at stage to see that my idea is working\nto a certain degree.</p>\n<h3 id=\"my-second-approach\" style=\"position:relative;\"><a href=\"#my-second-approach\" aria-label=\"my second approach permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>My Second Approach</h3>\n<p>Rolling back to the interview, after my forbidden spell\ngot, well, forbidden, I switched to another method.\nThis one is intuitive. We pick an random element from\nthe array, remove it and push it to a new array.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">randomArrBySplicePush</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> idx <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>selected<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>selected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is also very simple, but no where near the Knuth\nmethod. The performance bottleneck comes from the <code class=\"language-text\">splice</code>\noperation. Since you might need to shift the entire array,\nthis is a <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span> function.</p>\n<p>We will be going into measuring performance as well,\nin another blog post.</p>\n<h3 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h3>\n<p>V8 uses Tim sort. But if it were to use quicksort, my\napproach might still work. Some good progress has been\nmade. We will take a deep dive into measuring the\ndistribution and therefore my algorithm’s correctness\nin Part 2.</p>","frontmatter":{"date":"2019-09-25","title":"How to randomly permutate an Array? Part 1","subtitle":"The Dark Art, the Black Magic, the Forbidden Spell"},"timeToRead":11}},"pageContext":{"slug":"/2019-09-25-random-arr-0/","prev":{"title":"All about Tsung and Its Proxy recorder","path":"/blog/2019-11-22-all-about-tsung/"},"next":{"title":"Body as a Medium of Power and Desire","path":"/blog/2019-09-15-body-as-a-medium-of-power-and-desire/"}}},
    "staticQueryHashes": ["1827841","1979163989"]}