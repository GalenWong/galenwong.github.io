{
    "componentChunkName": "component---src-templates-blog-template-blog-template-tsx",
    "path": "/blog/2021-02-16-how-to-teach-useEffect/",
    "result": {"data":{"markdownRemark":{"html":"<p>Background: As a member of ACM Hack, I teach beginner-friendly workshops on web\nor mobile development. During Winter Quarter 2021, we are teaching React Native\n(check out the videos\n<a href=\"https://www.youtube.com/watch?v=dBVNzSvivow&#x26;list=PLPO7_kXilXFbUqE_ywfN65R0afhA8Okk5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>).\nI was tasked to teach the <code class=\"language-text\">useEffect</code> hook. Again, the audience can be complete\nbeginners that might not have any React experience or even programming\nexperience.</p>\n<p>It is already hard to teach someone <code class=\"language-text\">useEffect</code> who has pre-hook React\nexperience in class-based component. I have <a href=\"https://hack.uclaacm.com/posts/fall2019/js-chats-3/#useeffect-side-effect-in-function-component\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">tried it\nbefore</a>\nduring JavaScript Chats, a events geared towards more advanced users of\nJavaScript. We cannot use the same methodology here. We cannot say that\n<code class=\"language-text\">useEffect(f, [])</code> is equivalent to <code class=\"language-text\">componentDidMount</code> since the audience has\nno idea what is <code class=\"language-text\">componentDidMount</code>.</p>\n<p>Introducing <code class=\"language-text\">useEffect</code> is not as easy as introducing <code class=\"language-text\">componentDidMount</code>. For\n<code class=\"language-text\">componentDidMount</code> we can say, “anything you want to do only once after the\ncomponent is loaded, you put it in <code class=\"language-text\">componentDidMount</code>. Can we say the same in\na function component? It is easier to see it inside a class component since\n<code class=\"language-text\">componentDidMount</code> is a separate function from <code class=\"language-text\">render</code>. But <code class=\"language-text\">useEffect</code> is\nput in the same place inside the component. It is even harder to talk about the\nconcept through the term “side effect” since beginner don’t understand it that\nwell.</p>\n<p>I tried looking at articles online, a lot of them either explains it with\n<code class=\"language-text\">componentDidMount</code> or is difficult to understand for beginner.</p>\n<p>In this blog, I outline my approach to teaching <code class=\"language-text\">useEffect</code> without\n<code class=\"language-text\">componentDidMount</code>. Luckily, our audience has been introduced to <code class=\"language-text\">fetch</code> and\nAPI Calls. So I base my example off an API call.</p>\n<h2 id=\"step-1-motivation\" style=\"position:relative;\"><a href=\"#step-1-motivation\" aria-label=\"step 1 motivation permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1: Motivation</h2>\n<p>Say that you want to make an API call and display the result once the\napp is loaded. This provides a concrete use case as a motivation for\n<code class=\"language-text\">useEffect(f, [])</code>. The component starts off with the following structure.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">SomeComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>someState<span class=\"token punctuation\">,</span> setSomeState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// make an API call </span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>someState<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"step-2-making-mistake\" style=\"position:relative;\"><a href=\"#step-2-making-mistake\" aria-label=\"step 2 making mistake permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2: Making mistake</h2>\n<p>What happens when a side effect is not controlled properly? The component can\npossibly fall into an infinite loop in rendering. We want to show the audience\nthis problem by starting off doing things improperly.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">SomeComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>someState<span class=\"token punctuation\">,</span> setSomeState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callApiAndUpdateState</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'calling API...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">someApiCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setSomeState</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">callApiAndUpdateState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>someState<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For this demo, it is best if the API changes on each call (you can possibly\ninject randomness through <code class=\"language-text\">Math.random</code>) such that the <code class=\"language-text\">data</code> is different\nevery time and the state keeps changing. If not, you can still show the problem\nby looking at the console. Since <code class=\"language-text\">calling API...</code> will get printed at least\ntwice. This will cause a waste in bandwidth.</p>\n<p><strong>This mistake is really valuable for learning since let audience see two\nimportant concepts at the same time. First, a state change causes a re-render\nof a component. Second, side effect.</strong> A function that contains a side effect\nis a function that modifies data/state/variable that is outside of its scope.\nIt is clearly visible from this example that <code class=\"language-text\">setSomeState</code> is modifying state\noutside of the scope of the function <code class=\"language-text\">callApiAndUpdateState</code>.</p>\n<h2 id=\"step-3-introduce-the-solution\" style=\"position:relative;\"><a href=\"#step-3-introduce-the-solution\" aria-label=\"step 3 introduce the solution permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3: Introduce the solution</h2>\n<p>Now <code class=\"language-text\">useEffect</code> comes in naturally. We can say that <code class=\"language-text\">useEffect</code> is the hook\ndesigned exactly for solving issues like these.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">SomeComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>someState<span class=\"token punctuation\">,</span> setSomeState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callApiAndUpdateState</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'calling API...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">someApiCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setSomeState</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callApiAndUpdateState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>someState<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, at this point we will not explain why we passed in an empty array\n<code class=\"language-text\">[]</code>.  We have not yet introduced the dependency array yet. But other than\nthat, the audience should be able to grasp the first use case of <code class=\"language-text\">useEffect</code>,\nwhich is to execute side effect for only once when the component is loaded.\nNow the name of the hook also makes sense. Since it is used to contain a side\n<code class=\"language-text\">Effect</code>.</p>\n<h2 id=\"step-4-introduce-the-dependency-array\" style=\"position:relative;\"><a href=\"#step-4-introduce-the-dependency-array\" aria-label=\"step 4 introduce the dependency array permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4. Introduce the dependency array</h2>\n<p>Then, we can introduce the second use case of <code class=\"language-text\">useEffect</code>, which is to react to\nchanges of some variables. When the variable is changed, React will call the\nfunction which contains the side effect. In class terms, this is\n<code class=\"language-text\">componentDidUpdate</code>.</p>\n<p>Now, we can introduce the dependency array as the way to specify which\nvariables/states we are watching over. The example I used was to perform the\nAPI call again after some number of presses.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numPress <span class=\"token operator\">>=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callApiAndUpdateState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setNumPress</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>numPress<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We can give another example by performing different side effects: printing\nsomething, sending an alert/notification, change some styling or whatever.</p>\n<p>After we have explained the dependency array, we revisit the use case of the\nempty array.  We can say that the empty array has the following change when the\ncomponent is loaded for the first time.</p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>nothing</mtext><mover><mo stretchy=\"true\" minsize=\"3.0em\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mtext>first render</mtext></mpadded></mover><mrow><mo stretchy=\"false\">[</mo><mtext> </mtext><mo stretchy=\"false\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">  \\text{nothing} \\xrightarrow{\\text{first render}} {\\tt [\\ ]}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3025em;vertical-align:-0.1944em;\"></span><span class=\"mord text\"><span class=\"mord\">nothing</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1081em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">first render</span></span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.522em\" viewBox=\"0 0 400000 522\" preserveAspectRatio=\"xMaxYMin slice\"><path d=\"M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.011em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen\">[</span><span class=\"mspace\"> </span><span class=\"mclose\">]</span></span></span></span></span></span></span></div>\n<p>But the empty array cannot change to anything else. That’s why it does not\ncause the <code class=\"language-text\">useEffect</code> to be executed. Now we have filled the knowledge gap from\nstep 3.</p>\n<p>I also additionally introduced <code class=\"language-text\">useEffect</code> with <code class=\"language-text\">setInterval</code> to demonstrate an\nextreme consequence of mis-managing side effects, and to reinforce the use case\nof <code class=\"language-text\">useEffect(f, [])</code>.</p>\n<p>To see the final product, check out <a href=\"https://youtu.be/nlu2-xYNkQQ?t=2601\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this\nvideo</a> and the\n<a href=\"https://github.com/uclaacm/hack-sprint-w21/tree/master/session-5-async-and-life-cycle#useeffect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">README</a>\nthat went along with the workshop.</p>\n<p>That’s it, now you know how to teach <code class=\"language-text\">useEffect</code> without ever appealing to the\nknowledge of the class-based lifecycle method <code class=\"language-text\">componentDidMount</code>.</p>","frontmatter":{"date":"2021-02-16","title":"How to teach useEffect without componentDidMount","subtitle":"Introducing beginners to useEffect"},"timeToRead":5}},"pageContext":{"slug":"/2021-02-16-how-to-teach-useEffect/","prev":{"title":"Why I chose vscode-neovim over VSCodeVim","path":"/blog/2021-03-22-vscode-neovim-vs-vscodevim/"},"next":{"title":"Cleaning Up My Mac","path":"/blog/2021-02-13-cleaning-up-my-mac/"}}},
    "staticQueryHashes": ["1827841","1979163989"]}