{
    "componentChunkName": "component---src-templates-blog-template-blog-template-tsx",
    "path": "/blog/2019-06-26-measurement-of-ajax/2-ajax-measurement/",
    "result": {"data":{"markdownRemark":{"html":"<p>At the end of my\n<a href=\"/blog/2019-06-23-ajax-and-the-halting-problem/\">previous blog post</a>,\nI briefly mentioned how I plan to measure the amount\nof impact that Ajax has on a page.\nIn this blog post, I will explain how I did it.</p>\n<h3 id=\"assumption\" style=\"position:relative;\"><a href=\"#assumption\" aria-label=\"assumption permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assumption</h3>\n<p>Before we start measuring the impact of Ajax,\nwe assume we have 2 html documents available to us.</p>\n<ol>\n<li>the DOM without executing any JavaScript</li>\n<li>the DOM after “finish executing” all JavaScript</li>\n</ol>\n<p>The first one is quite easy to obtain.\nWe just fetch the document with <code class=\"language-text\">curl</code> or the <code class=\"language-text\">requests</code>\npackage in Python.\nI explained how to get the second one in the last blog post.\nThere is just no perfect way but to blindly wait for\nsome number of seconds.</p>\n<p>Assuming we have both, let’s see how we can measure the\nimpact of Ajax on a page.</p>\n<h3 id=\"attempt-1-counting-the-difference-in-lines\" style=\"position:relative;\"><a href=\"#attempt-1-counting-the-difference-in-lines\" aria-label=\"attempt 1 counting the difference in lines permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Attempt 1: Counting the Difference in Lines</h3>\n<p>To any software developer who works with git,\nthe first instinct to measure the difference\nbetween 2 files is to use the program <code class=\"language-text\">diff</code>.\nWe can simply do <code class=\"language-text\">diff file1 file2</code> and we\nget how many lines are added or deleted.</p>\n<p>There is an issue with this. With minified html\nfiles, there can be only a few new lines or even\nno newline at all! Consider this valid html\ndocument.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javascript/json<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><span class=\"token punctuation\">{</span><span class=\"token string\">\"my data\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"blah blah blah\"</span><span class=\"token punctuation\">}</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello World!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Yes, everything is on the same line.\nIt is unfriendly to human but it saves more\nmemory for the machine.</p>\n<p>So this simple attempt just won’t work.</p>\n<h3 id=\"attempt-2-attempt-1--beautifulsoup\" style=\"position:relative;\"><a href=\"#attempt-2-attempt-1--beautifulsoup\" aria-label=\"attempt 2 attempt 1  beautifulsoup permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Attempt 2: Attempt 1 + BeautifulSoup</h3>\n<p>To avoid the above issue, we can prettify the\nhtml document to make it more human readable\nand therefore <code class=\"language-text\">diff</code> can work with it easily.\nWhen it comes to html parsing, BeautifulSoup\nis an excellent library. And it does exactly\nwhat we want.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">html <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;html>&lt;head>&lt;script type=\"javascript/json\">{\"my data\": \"blah blah blah\"}&lt;/script>&lt;/head>&lt;body>&lt;h1>Hello World!&lt;/h1>&lt;/body>&lt;/html>'</span>\n\nsoup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">,</span> <span class=\"token string\">'html.parser'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>soup<span class=\"token punctuation\">.</span>prettify<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The above code should print</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javascript/json<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n            <span class=\"token punctuation\">{</span><span class=\"token string\">\"my data\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"blah blah blah\"</span><span class=\"token punctuation\">}</span>\n        </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>\n                Hello World!\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>With the prettified version, we can now\napply <code class=\"language-text\">diff</code> on it.</p>\n<h4 id=\"issue-useless-noise\" style=\"position:relative;\"><a href=\"#issue-useless-noise\" aria-label=\"issue useless noise permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Issue: Useless Noise</h4>\n<p>When you look at the above html,\nwhat is visible to the user is only one line\n<code class=\"language-text\">Hello World!</code>.\nOther than that, the user will not see anything\nelse on the screen.\nThese are extra information that is\nneither useful to a user or to a search engine.\nHTML tag should not be considered as “part of\nthe content of a webpage”.</p>\n<p>Since we are measuring the percentage change\non content, we need to filter those noise out.\nOtherwise, the number of lines that the tags\ntake up are marginalize the change in actual\ncontent.</p>\n<p>Interestingly, when I was doing the testing,\nhtml tag actually “amplifies” the impact of\nAjax. Nowadays, JavaScript controls different\naspect of tags, such as injecting styles by\ngiving new class name or ID, or putting meta\nattributes onto the tag. Regardless of\nwhether the tag diminishes or amplifies the\nimpact of JavaScript, they are noice that\nhas to be filtered out.</p>\n<h3 id=\"attempt-3-attempt-2--get_text\" style=\"position:relative;\"><a href=\"#attempt-3-attempt-2--get_text\" aria-label=\"attempt 3 attempt 2  get_text permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Attempt 3: Attempt 2 + <code class=\"language-text\">get_text()</code></h3>\n<p>The solution is the noise problem is again\nprovided by BeautifulSoup. There is a built-in\nmethod named <code class=\"language-text\">get_text</code> which literally returns\nthe text within HTML.\nContinuing from the example above,</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">html <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;html>&lt;head>&lt;script type=\"javascript/json\">{\"my data\": \"blah blah blah\"}&lt;/script>&lt;/head>&lt;body>&lt;h1>Hello World!&lt;/h1>&lt;/body>&lt;/html>'</span>\n\nsoup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">,</span> <span class=\"token string\">'html.parser'</span><span class=\"token punctuation\">)</span>\nsoup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span>soup<span class=\"token punctuation\">.</span>prettify<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'html.parser'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>soup<span class=\"token punctuation\">.</span>get_text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The above code shuold output</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">            {\"my data\": \"blah blah blah\"}\n                Hello World!</code></pre></div>\n<p>You might notice the indentation being\nprinted here. Yes, indentation is also\nconsidered as part of the “text”.\nAlso, this only works when we pass the\nprettified version of the html to\nBeautifulSoup, or the content only gets\nprinted onto one line, which goes back to\nthe problem we had in Attempt 1.</p>\n<p>Indentations are not useful. 2 lines should\nnot be considered to be different if the\nindentation is different (at least in our\ncontext), since they do not make a difference\nto the user viewing the page.</p>\n<p>It is easy to remove any indentation, or more\ngenerically white space around a line, using\nthe Python built-in method <code class=\"language-text\">str.strip()</code>.</p>\n<h4 id=\"issue-even-script-tag\" style=\"position:relative;\"><a href=\"#issue-even-script-tag\" aria-label=\"issue even script tag permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Issue: even <code class=\"language-text\">script</code> tag?</h4>\n<p>You might have also noticed that the content\nwithin the <code class=\"language-text\">script</code> tag is also being grabbed\nby the <code class=\"language-text\">get_text</code> method. But any content within\nthe <code class=\"language-text\">script</code> tag is not visible to the user\nas well. Other examples of such tags include\n<code class=\"language-text\">link</code> and <code class=\"language-text\">style</code>.</p>\n<h3 id=\"attempt-4-attempt-3--tag-removal\" style=\"position:relative;\"><a href=\"#attempt-4-attempt-3--tag-removal\" aria-label=\"attempt 4 attempt 3  tag removal permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Attempt 4: Attempt 3 + Tag Removal</h3>\n<p>BeautifulSoup allows us to remove the tag by\nusing the method <code class=\"language-text\">extract</code>. We can remove all\ninvisible tag.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>extract<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> soup<span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>extract<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> soup<span class=\"token punctuation\">(</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>extract<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> soup<span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>After running these, our above example will\nonly output <code class=\"language-text\">Hello World!</code> without leading\nor trailing space.</p>\n<p>We can further limits the content to anything\nwithin the <code class=\"language-text\">body</code> tag only.\nNotice that <code class=\"language-text\">strip</code> also removes any lines with\njust whitespace.\nThe complete function to do the extraction\nis listed here.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">stripped_text</span><span class=\"token punctuation\">(</span>html_text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    parser <span class=\"token operator\">=</span> <span class=\"token string\">'html.parser'</span>\n    soup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span>html_text<span class=\"token punctuation\">,</span> parser<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># remove any script, style, link tags</span>\n    <span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>extract<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> soup<span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>extract<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> soup<span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">.</span>extract<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> l <span class=\"token keyword\">in</span> soup<span class=\"token punctuation\">(</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    b <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span>\n    text_only <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>get_text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># remove empty lines</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> text_only<span class=\"token punctuation\">.</span>splitlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        trimmed <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> trimmed<span class=\"token punctuation\">:</span>\n            result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>trimmed<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> os<span class=\"token punctuation\">.</span>linesep<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"gatsby-remark-autolink-headers-a-tags before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h3>\n<p>Finally, to measure the impact of Ajax,\nwe can use the percentage change.</p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>P</mi><msub><mi>C</mi><mrow><mi>a</mi><mi>j</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><mfrac><mrow><mtext>dynamic number of lines</mtext><mo>−</mo><mtext>static number of lines</mtext></mrow><mtext>dynamic number of lines</mtext></mfrac></mrow><annotation encoding=\"application/x-tex\">\\def \\dnl {\\text{dynamic number of lines}}\n\\def \\snl {\\text{static number of lines}}\n    PC_{ajax} = \\frac{\\dnl-\\snl}{\\dnl}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">aja</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.25188em;vertical-align:-0.8804400000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714399999999998em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">dynamic number of lines</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">dynamic number of lines</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord text\"><span class=\"mord\">static number of lines</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804400000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></div>\n<p>What was this used for? I did a study during my\ninternship, in which we looks at the impact of having\nAjax on the ranking of the page in the Baidu search\nengine. A brief result summary can be found\n<a href=\"https://www.chinafy.com/blog/if_baidu_cant_crawl_dynamic_sites_do_pages_heavy_with_ajax_and_js_perform_worse_in_seo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.\nThere wasn’t anything astonishing in particular,\nbut it was a fun study to do.</p>","frontmatter":{"date":"2019-06-26","title":"Measuring Impact of Ajax on a Webpage","subtitle":"My attempt to quantify Ajax…"},"timeToRead":5}},"pageContext":{"slug":"/2019-06-26-measurement-of-ajax/2-ajax-measurement/","prev":{"title":"My First Blog, Finally","path":"/blog/2019-09-11-first-blog/"},"next":{"title":"Ajax and the Halting Problem","path":"/blog/2019-06-23-ajax-and-the-halting-problem/"}}},
    "staticQueryHashes": ["1827841","1979163989"]}